<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-28T09:56:23-06:00</updated><id>/feed.xml</id><title type="html">Stat 426 - Fall 2021</title><subtitle>Class Blog and Projects</subtitle><entry><title type="html">reticulate</title><link href="/blog/reticulate" rel="alternate" type="text/html" title="reticulate" /><published>2021-09-27T00:00:00-06:00</published><updated>2021-09-27T00:00:00-06:00</updated><id>/blog/reticulate</id><content type="html" xml:base="/blog/reticulate">&lt;p&gt;In the data science field, the debate between R and Python rages on. Both languages claim to be superior to the other for data science. In my experience, both R and Python are good languages and each one has its strong-suits in certain areas. Recently, I came across reticulate, an R package leading the way in bringing R and Python together and allowing for data scientists to get the best out of both languages. Now, instead of having to choose between R and Python, you can have both!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3o7aCRloybJlXpNjSU/giphy.gif&quot; alt=&quot;El Dorado - Both&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reticulateinstallation&quot;&gt;reticulate::installation&lt;/h2&gt;

&lt;p&gt;To use the reticulate package, both &lt;a href=&quot;https://cran.r-project.org&quot;&gt;R&lt;/a&gt; and &lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt; need to be installed on your machine.&lt;/p&gt;

&lt;p&gt;Since reticulate is an R package, it is installed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install.packages('reticulate')&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;reticulatefinding_python_interpreters&quot;&gt;reticulate::finding_python_interpreters&lt;/h2&gt;

&lt;p&gt;One aspect of this package that can get a little bit complicated is specifying which Python interpreter you want the reticulate package to use. Python can be installed from various places, some of which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org&quot;&gt;Python Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.anaconda.com&quot;&gt;Anaconda&lt;/a&gt; / &lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;Miniconda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew (MacOS only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, Python virtual environments have their own executable files (&lt;em&gt;.exe&lt;/em&gt;) so each virtual environment is another Python interpreter.&lt;/p&gt;

&lt;p&gt;All in all, it’s quite possible you could have multiple Python interpreters installed in multiple places on your computer.&lt;/p&gt;

&lt;p&gt;The simplest solution that I have found is using &lt;a href=&quot;https://www.rstudio.com&quot;&gt;RStudio&lt;/a&gt;. In the newest version of RStudio (1.4.1717), it is able to detect all the Python interpreters on your machine and allows you to choose which one to use.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Global Options&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://support.rstudio.com/hc/article_attachments/1500011460282/Screen_Shot_2021-04-21_at_3.33.02_PM.png&quot; alt=&quot;RStudio Global Options&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Then &lt;strong&gt;Select…&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://support.rstudio.com/hc/article_attachments/1500011460302/Screen_Shot_2021-04-21_at_3.34.00_PM.png&quot; alt=&quot;Select Python Interpreter&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After selecting a Python interpreter, click &lt;strong&gt;Select&lt;/strong&gt; then &lt;strong&gt;Apply&lt;/strong&gt;. &lt;em&gt;This will restart your R session.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this, you should be all good to go. To check which Python interpreter reticulate is using you can run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;py_config()&lt;/code&gt; function. The output of which should look similar to something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; py_config()
python:         /usr/local/bin/python
libpython:      /usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/config-3.9-darwin/libpython3.9.dylib
pythonhome:     /usr/local/Cellar/python@3.9/3.9.7/Frameworks/Python.framework/Versions/3.9:/usr/local/Cellar/python@3.9/3.9.7/Frameworks/Python.framework/Versions/3.9
version:        3.9.7 (default, Sep  3 2021, 12:37:55)  [Clang 12.0.5 (clang-1205.0.22.9)]
numpy:          /usr/local/lib/python3.9/site-packages/numpy
numpy_version:  1.21.2

NOTE: Python version was forced by use_python function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If issues with selecting the right Python interpreter persist, these articles offer more details and troubleshooting:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rstudio.github.io/reticulate/articles/versions.html&quot;&gt;Python Version Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/1500007929061-Using-Python-with-the-RStudio-IDE&quot;&gt;Using Python with the RStudio IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reticulatevirtual_environments&quot;&gt;reticulate::virtual_environments&lt;/h2&gt;

&lt;p&gt;One especially great feature of the reticulate package is that it permits the user to create and manage Python virtual environments. A Python virtual environment creates a folder with a separate Python interpreter. Virtual environments are great for managing Python packages and their dependencies. Sometimes, a Python package requires an older version of a package to be installed and instead of having to re-install an older version of the dependent package that could possibly mess up other packages, a virtual environment allows for the older version of the dependent package to be installed in a separate location and be kept separate.&lt;/p&gt;

&lt;p&gt;If you’re familiar with R, I like to think that virtual environments are to Python what projects are to R.&lt;/p&gt;

&lt;p&gt;To create a Python virtual environment with reticulate, there’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv_create()&lt;/code&gt; function. For example, if I wanted to create a Python virtual environment &lt;em&gt;Tatooine&lt;/em&gt;, I would run the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; virtualenv_create('Tatooine')
Using Python: /usr/local/Cellar/python@3.9/3.9.7/Frameworks/Python.framework/Versions/3.9/bin/python3.9
Creating virtual environment 'Tatooine' ... Done!
Installing packages: 'pip', 'wheel', 'setuptools', 'numpy'
Requirement already satisfied: pip in /Users/matthewmorgan/.virtualenvs/Tatooine/lib/python3.9/site-packages (21.2.4)
Collecting wheel
  Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB)
Requirement already satisfied: setuptools in /Users/matthewmorgan/.virtualenvs/Tatooine/lib/python3.9/site-packages (57.4.0)
Collecting setuptools
  Downloading setuptools-58.0.4-py3-none-any.whl (816 kB)
Collecting numpy
  Using cached numpy-1.21.2-cp39-cp39-macosx_10_9_x86_64.whl (17.0 MB)
Installing collected packages: wheel, setuptools, numpy
  Attempting uninstall: setuptools
    Found existing installation: setuptools 57.4.0
    Uninstalling setuptools-57.4.0:
      Successfully uninstalled setuptools-57.4.0
Successfully installed numpy-1.21.2 setuptools-58.0.4 wheel-0.37.0
Virtual environment 'Tatooine' successfully created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When a virtual environments created with this function are located in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.virtualenvs&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;As you can see, when the Python virtual environment is created, it automatically installs the &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;wheel&lt;/em&gt;, &lt;em&gt;setuptools&lt;/em&gt;, and &lt;em&gt;numpy&lt;/em&gt; packages along with it.&lt;/p&gt;

&lt;p&gt;This package also allows the user to specify which Python interpreter and which Python version should be used with the new virtual environment.&lt;/p&gt;

&lt;p&gt;To install additional packages in the virtual environment, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv_install()&lt;/code&gt; function can be used. Here, I installed the &lt;em&gt;pandas&lt;/em&gt; package in the &lt;em&gt;Tatooine&lt;/em&gt; virtual environment&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; virtualenv_install('Tatooine', 'pandas')
Using virtual environment 'Tatooine' ...
Collecting pandas
  Downloading pandas-1.3.3-cp39-cp39-macosx_10_9_x86_64.whl (11.6 MB)
Collecting python-dateutil&amp;gt;=2.7.3
  Using cached python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)
Requirement already satisfied: numpy&amp;gt;=1.17.3 in /Users/matthewmorgan/.virtualenvs/Tatooine/lib/python3.9/site-packages (from pandas) (1.21.2)
Collecting pytz&amp;gt;=2017.3
  Using cached pytz-2021.1-py2.py3-none-any.whl (510 kB)
Collecting six&amp;gt;=1.5
  Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)
Installing collected packages: six, pytz, python-dateutil, pandas
Successfully installed pandas-1.3.3 python-dateutil-2.8.2 pytz-2021.1 six-1.16.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To list all the Python virtual environments on your machine, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv_list()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; virtualenv_list()
[1] &quot;r-reticulate&quot; &quot;SASPy&quot;        &quot;Tatooine&quot;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use a specific virtual environment, you can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_virtualenv()&lt;/code&gt; function
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  use_virtualenv('Tatooine') # Telling reticulate to use the Tatooine virtual environment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Select the Python interpreter from RStudio’s Global Options as shown previously&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to remove a Python virtual environment, there’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv_remove()&lt;/code&gt; function. Here, I remove the &lt;em&gt;Tatooine&lt;/em&gt; Python virtual environment:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; virtualenv_remove('Tatooine')
Remove virtual environment 'Tatooine'? [Y/n]: Y
Virtual environment 'Tatooine' removed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv_list()&lt;/code&gt; returns the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; virtualenv_list()
[1] &quot;r-reticulate&quot; &quot;SASPy&quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Overall, the reticulate package is great for managing Python virtual environments all from R. More info on these functions can be found &lt;a href=&quot;https://rstudio.github.io/reticulate/reference/virtualenv-tools.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reticulatepython_in_r&quot;&gt;reticulate::python_in_R&lt;/h2&gt;

&lt;p&gt;With reticulate, Python scripts can easily be run in RStudio.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open a &lt;em&gt;.py&lt;/em&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reticulate::repl_python()&lt;/code&gt; in the &lt;strong&gt;Console&lt;/strong&gt; to start a Python session&lt;/li&gt;
  &lt;li&gt;Execute the &lt;em&gt;.py&lt;/em&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quit&lt;/code&gt; in the &lt;strong&gt;Console&lt;/strong&gt; to end the Python session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;reticulate also allows for seamless integration of Python into R Markdown (&lt;em&gt;.Rmd&lt;/em&gt;) files&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initialize an R chunk:
    &lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;{r setup, include = FALSE}
&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;  library(reticulate)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create Python chunks by specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; at the top of the chunk instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;. After this, you can code in Python like you would in any other IDE (Jupyter, Spyder, etc):
  ```{python}
  import numpy as np&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;def perfect_sq(n):
    sqrt_n = np.sqrt(n)
    if sqrt_n * sqrt_n == n:
      print(n, ‘is a perfect square of’, int(sqrt_n))
    else:
      return(False)&lt;/p&gt;

&lt;p&gt;perfect_sq(25)&lt;/p&gt;

&lt;p&gt;Python 3.9.7 (/usr/local/bin/python)
  Reticulate 1.22 REPL – A Python interpreter in R.
  Enter ‘exit’ or ‘quit’ to exit the REPL and return to R.
  25 is a perfect square of 5&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _These Python chunks can be run the same way R chunks are run in R Markdown files_

  3. The output message displaying the Python and reticulate version info will always be output unless suppressed
  ````md
  ```{r}
  options(reticulate.repl.quiet = TRUE) # Could be added to the setup chunk in step 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  ````md
  ```{python}
  import numpy as np

  def perfect_sq(n):
    sqrt_n = np.sqrt(n)
    if sqrt_n * sqrt_n == n:
      print(n, 'is a perfect square of', int(sqrt_n))
    else:
      return(False)

  perfect_sq(25)
  ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  25 is a perfect square root of 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reticulate package has many more functions that allow R and Python to communicate with each other. The following article explains these functions in much greater detail:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rstudio.github.io/reticulate/articles/calling_python.html&quot;&gt;Calling Python from R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reticulateconclusions&quot;&gt;reticulate::conclusions&lt;/h2&gt;

&lt;p&gt;The main aspect that I like about the reticulate package is that it’s allowed me to use RStudio as my IDE for both R and Python which is great because I am already familiar with RStudio. Although, I still have a lot to learn about the reticulate package. My personal goal is to continue to learn and practice with this package so that I can become well-versed in both R and Python.&lt;/p&gt;

&lt;p&gt;Hopefully, this post has piqued you interest and served as a tutorial that helps you in getting up and running with the reticulate package yourself.&lt;/p&gt;

&lt;p&gt;Best of luck!&lt;/p&gt;</content><author><name>Matthew Morgan</name><email>matthewrmorgan17@gmail.com</email></author><category term="R" /><category term="Python" /><category term="Interface" /><category term="RStudio" /><summary type="html">In the data science field, the debate between R and Python rages on. Both languages claim to be superior to the other for data science. In my experience, both R and Python are good languages and each one has its strong-suits in certain areas. Recently, I came across reticulate, an R package leading the way in bringing R and Python together and allowing for data scientists to get the best out of both languages. Now, instead of having to choose between R and Python, you can have both!</summary></entry><entry><title type="html">Create a blog post title picture</title><link href="/blog/photo-blur" rel="alternate" type="text/html" title="Create a blog post title picture" /><published>2021-09-23T00:00:00-06:00</published><updated>2021-09-23T00:00:00-06:00</updated><id>/blog/photo-blur</id><content type="html" xml:base="/blog/photo-blur">&lt;h1 id=&quot;create-a-blog-post-title-picture&quot;&gt;Create a Blog Post Title Picture&lt;/h1&gt;

&lt;p&gt;A cool way to make your blog title stand out, is to blur a picture and add the text of your blog title in bold letters, as in the example below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/ss-blog2.png&quot; alt=&quot;example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are many ways that this can be done, but this is the method that I used.&lt;/p&gt;

&lt;p&gt;Note that
these instructions were created using PowerPoint for Mac.  On Windows, the idea is the same, but the menus might be in slightly different places.  See &lt;a href=&quot;https://www.howtogeek.com/437476/how-to-blur-an-image-in-powerpoint/&quot;&gt;this post&lt;/a&gt; for Windows illustrations, at least for the photo blurring section.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;blurring-the-photo&quot;&gt;Blurring the Photo&lt;/h2&gt;

&lt;h4 id=&quot;1&quot;&gt;1&lt;/h4&gt;
&lt;p&gt;Open your photo in PowerPoint (Insert –&amp;gt; Picture –&amp;gt; Picture from file) or simply drag the file of the photo into a PowerPoint Page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/open-pic.png&quot; alt=&quot;open&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2&quot;&gt;2&lt;/h4&gt;
&lt;p&gt;Select the picture.  When the picture is selected a new top menu should appear named “Picture Format”.  Select that menu and then find the arrow next to “Artistic Effects”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/menu.png&quot; alt=&quot;art&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3&quot;&gt;3&lt;/h4&gt;
&lt;p&gt;Click the arrow next to “Artistic Effects” and choose the “Blur” option.  Your picture is now blurred, but the default effect is quite subtle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/blur.png&quot; alt=&quot;blur&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4&quot;&gt;4&lt;/h4&gt;
&lt;p&gt;To change the level of blurring, go back to “Artistic Effects” and select “Artistic Effects Options”.  This will open the “Format Picture” pane on the right.  Select the “Effects” tab (the pentagon), then “Artistic Effects” and adjust the radius.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/sidebar-complete.png&quot; alt=&quot;sidebar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The higher the radius, the more blurred the picture will be.  See the figure below with examples of radius 20, 50, and 85.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/blur-compare.png&quot; alt=&quot;blur-example&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;adding-text&quot;&gt;Adding Text&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new text box&lt;/li&gt;
  &lt;li&gt;Change text color to white&lt;/li&gt;
  &lt;li&gt;Increase text size to 54&lt;/li&gt;
  &lt;li&gt;Bold the text&lt;/li&gt;
  &lt;li&gt;Add a subtle shadow&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-a-subtle-shadow-to-the-text&quot;&gt;Add a subtle shadow to the text&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Double click on the text box to open the “Format Shape” menu on the right&lt;/li&gt;
  &lt;li&gt;Select the “Text Options” tab and then select the “Text Effects” tab&lt;/li&gt;
  &lt;li&gt;Expand the “Shadow” option and open the “Presets” dropdown menu.  Select the first option under “Outer”.&lt;/li&gt;
  &lt;li&gt;Position the textbox in the center of the blurred photo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/shadow.png&quot; alt=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;saving-the-picture&quot;&gt;Saving the picture&lt;/h2&gt;

&lt;p&gt;To save your work as a .png file:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Select the blurred photo and the text box&lt;/li&gt;
  &lt;li&gt;Right click and select “Save as Figure”&lt;/li&gt;
  &lt;li&gt;Save the figure in your desired location&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-23/saving.png&quot; alt=&quot;save&quot; /&gt;&lt;/p&gt;</content><author><name>E. Shannon Tass</name><email>esnt@byu.edu</email></author><category term="photo effects" /><category term="powerpoint" /><category term="picture" /><category term="blog" /><summary type="html">Create a Blog Post Title Picture</summary></entry><entry><title type="html">Using SSH with GitHub</title><link href="/blog/ssh-and-github" rel="alternate" type="text/html" title="Using SSH with GitHub" /><published>2021-09-13T00:00:00-06:00</published><updated>2021-09-13T00:00:00-06:00</updated><id>/blog/ssh-and-github</id><content type="html" xml:base="/blog/ssh-and-github">&lt;p&gt;This post is adapted from the GitHub documentation page
&lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh&quot;&gt;Connecting to GitHub with SSH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use the SSH protocol by setting up SSH keys to connect with GitHub without
needing to supply your username and access token.  SSH stands for Secure Shell
and it protocol for operating network services securely over an unsecured network.
You can read more about SSH &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;check-for-existing-ssh-keys&quot;&gt;Check for existing SSH keys&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Open the terminal (Mac) or Git Bash (Windows)&lt;/li&gt;
  &lt;li&gt;Enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la ~/.ssh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the directory listing to see if you have a public SSH key, usually:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;id_rsa.pub&lt;/li&gt;
      &lt;li&gt;id_ecdsa.pub&lt;/li&gt;
      &lt;li&gt;id_ed25519.pub&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you receive an error that ~/.ssh doesn’t exist, then you don’t have ssh keys&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;generating-new-ssh-keys&quot;&gt;Generating New SSH Keys&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(If you already have SSH keys, skip to the next section.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below are instructions for generating SSH keys.  When doing this, you have the choice of an algorithm to use (with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option) and the key size (with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt; option).  You can read more about SSH keys and the different algorithm/key size options &lt;a href=&quot;https://www.ssh.com/academy/ssh/keygen&quot;&gt;here&lt;/a&gt;.  The instructions below use the rsa algorithm with a 4096 bit key size.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the terminal (Mac) or Git Bash (Windows)&lt;/li&gt;
  &lt;li&gt;In the terminal type&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096 -C &quot;your_github_email@email.com&quot;&lt;/code&gt; &lt;br /&gt;
(be sure to use your actual GitHub email address)&lt;/li&gt;
  &lt;li&gt;When you are prompted to “Enter a file in which to save the key”, just press enter to accept the default location&lt;/li&gt;
  &lt;li&gt;Add a passphrase for extra security or press enter for no passphrase&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;adding-ssh-keys-to-your-github-account&quot;&gt;Adding SSH Keys to your GitHub Account&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the SSH public key to the clipboard.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt;
will show you the public key and you can copy it.&lt;/li&gt;
  &lt;li&gt;Go to GitHub.  In the upper-right corner, click on your profile photo, then click &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;In the user settings sidebar, click &lt;em&gt;SSH and GPG keys&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;New SSH key&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In the “Title” field, add a label for your key.  For example “Personal MacBook Air”&lt;/li&gt;
  &lt;li&gt;Paste your key into the “Key” field.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Add SSH key&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;using-ssh-key&quot;&gt;Using SSH Key&lt;/h1&gt;
&lt;p&gt;In GitHub, when cloning repositories, or setting up the remote repository, use SSH instead of HTTP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogimages/figs-09-13/github-ssh.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;</content><author><name>E. Shannon Tass</name><email>esnt@byu.edu</email></author><category term="ssh" /><category term="git" /><category term="github" /><summary type="html">This post is adapted from the GitHub documentation page Connecting to GitHub with SSH.</summary></entry><entry><title type="html">Sample Post</title><link href="/blog/sample-post" rel="alternate" type="text/html" title="Sample Post" /><published>2020-04-24T00:00:00-06:00</published><updated>2020-04-24T00:00:00-06:00</updated><id>/blog/sample-post</id><content type="html" xml:base="/blog/sample-post">&lt;p&gt;This post will show you how the content will look like in the post pages and how the headlines, quotes and quotes will be represented. Jekyll is mainly used to write simple markdown and after that it renders out a static pages, so you need to know the basics of writing markdown for that.
For more information about writing markdown you can checkout the following markdown cheatsheets:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Mastering Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/cheat-sheet/&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GitHub Flavored Markdown Spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;this-is-the-h1-text&quot;&gt;This is the h1 text&lt;/h1&gt;
&lt;h2 id=&quot;this-is-the-h2-text&quot;&gt;This is the h2 text&lt;/h2&gt;
&lt;h3 id=&quot;this-is-the-h3-text&quot;&gt;This is the h3 text&lt;/h3&gt;
&lt;h4 id=&quot;this-is-the-h4-text&quot;&gt;This is the h4 text&lt;/h4&gt;
&lt;h5 id=&quot;this-is-the-h5-text&quot;&gt;This is the h5 text&lt;/h5&gt;
&lt;h6 id=&quot;this-is-the-h6-text&quot;&gt;This is the h6 text&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Bold Text in the post will look like:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;This text is Bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Italic Text in the post will look like:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;This text is Italic&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quotes on your post will look like this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codes on your post will look like this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link in the post will look like:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;#&quot;&gt;This is a link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bullet list in the post will look like:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3&lt;/li&gt;
  &lt;li&gt;Item 4&lt;/li&gt;
  &lt;li&gt;Item 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Number list in the post will look like:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3&lt;/li&gt;
  &lt;li&gt;Item 4&lt;/li&gt;
  &lt;li&gt;Item 5&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Images in the post will look like:&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/canada.jpg&quot; alt=&quot;Test Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Normal text in the post will look like&lt;/strong&gt;&lt;br /&gt;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id finibus nisl. Etiam in hendrerit est. Nulla non erat ac lectus interdum lobortis. Vestibulum at mi ex. Mauris nisl mi, venenatis et feugiat nec, finibus porttitor velit. Suspendisse tincidunt lobortis leo, quis tristique tellus iaculis quis. Donec eleifend pulvinar gravida. Proin non lorem eros. Donec sit amet finibus ex, eget vestibulum nunc. Ut ut enim id purus porttitor tristique. Vivamus tincidunt eleifend hendrerit. Proin metus felis, ultrices vel dui in, porta dapibus dui. Sed sagittis ex vitae dui tristique dignissim. Cras vel leo ipsum.&lt;/p&gt;

&lt;p&gt;Aenean ac neque et risus mattis accumsan. Sed ac tellus molestie, lacinia ante sit amet, convallis felis. Maecenas aliquet lectus nec euismod auctor. Donec finibus pellentesque tortor, ac efficitur metus suscipit non. Proin diam orci, blandit quis malesuada ac, efficitur a nisl. Mauris eleifend consequat blandit. Sed egestas quam et orci gravida, non euismod metus scelerisque. Curabitur venenatis pellentesque erat commodo pharetra. Fusce id ante nec ipsum fringilla auctor. In justo quam, feugiat placerat eleifend dapibus, luctus et quam. Fusce facilisis erat ut odio convallis viverra et id mauris. Sed vehicula tempus consectetur. Aliquam pharetra, purus non egestas tristique, tellus massa fringilla est, id sagittis tellus urna non mauris. Suspendisse fringilla, velit nec blandit facilisis, ligula ante imperdiet est, et placerat magna sem quis tortor.&lt;/p&gt;

&lt;p&gt;Vestibulum vitae fermentum velit, rhoncus egestas orci. Nulla at purus ut orci posuere vulputate. In eget leo diam. In congue in diam nec elementum. Suspendisse fringilla ante nulla, eu tristique orci ultrices eget. Aenean non lorem tellus. Vestibulum tempor metus sit amet tellus feugiat, sit amet consequat lacus ultricies.&lt;/p&gt;

&lt;p&gt;Donec imperdiet, lectus eget congue cursus, dolor enim finibus risus, ut molestie lorem tellus non tortor. Donec quam nibh, molestie in dapibus et, efficitur non tortor. Morbi orci tellus, mollis vel mi vitae, auctor lobortis erat. Ut gravida velit eget ligula lacinia, id rhoncus tellus gravida. Maecenas laoreet rutrum consequat. Suspendisse sed nibh dui. Curabitur dictum euismod mollis. Sed egestas libero libero, eu accumsan augue placerat non. Nunc id condimentum orci. Mauris vitae sollicitudin quam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Giphy Gifs will look like:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;iframe src=&quot;https://giphy.com/embed/ZqlvCTNHpqrio&quot; width=&quot;480&quot; height=&quot;259&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://giphy.com/gifs/laughing-despicable-me-minions-ZqlvCTNHpqrio&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;</content><author><name>The DevsLot</name><email>thedevslot@gmail.com</email></author><category term="sample" /><category term="post" /><category term="test" /><summary type="html">This post will show you how the content will look like in the post pages and how the headlines, quotes and quotes will be represented. Jekyll is mainly used to write simple markdown and after that it renders out a static pages, so you need to know the basics of writing markdown for that. For more information about writing markdown you can checkout the following markdown cheatsheets: Mastering Markdown Markdown Guide GitHub Flavored Markdown Spec This is the h1 text This is the h2 text This is the h3 text This is the h4 text This is the h5 text This is the h6 text Bold Text in the post will look like: This text is Bold Italic Text in the post will look like: This text is Italic Quotes on your post will look like this Codes on your post will look like this Link in the post will look like: This is a link Bullet list in the post will look like: Item 1 Item 2 Item 3 Item 4 Item 5 Number list in the post will look like: Item 1 Item 2 Item 3 Item 4 Item 5 Images in the post will look like: Normal text in the post will look like Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id finibus nisl. Etiam in hendrerit est. Nulla non erat ac lectus interdum lobortis. Vestibulum at mi ex. Mauris nisl mi, venenatis et feugiat nec, finibus porttitor velit. Suspendisse tincidunt lobortis leo, quis tristique tellus iaculis quis. Donec eleifend pulvinar gravida. Proin non lorem eros. Donec sit amet finibus ex, eget vestibulum nunc. Ut ut enim id purus porttitor tristique. Vivamus tincidunt eleifend hendrerit. Proin metus felis, ultrices vel dui in, porta dapibus dui. Sed sagittis ex vitae dui tristique dignissim. Cras vel leo ipsum. Aenean ac neque et risus mattis accumsan. Sed ac tellus molestie, lacinia ante sit amet, convallis felis. Maecenas aliquet lectus nec euismod auctor. Donec finibus pellentesque tortor, ac efficitur metus suscipit non. Proin diam orci, blandit quis malesuada ac, efficitur a nisl. Mauris eleifend consequat blandit. Sed egestas quam et orci gravida, non euismod metus scelerisque. Curabitur venenatis pellentesque erat commodo pharetra. Fusce id ante nec ipsum fringilla auctor. In justo quam, feugiat placerat eleifend dapibus, luctus et quam. Fusce facilisis erat ut odio convallis viverra et id mauris. Sed vehicula tempus consectetur. Aliquam pharetra, purus non egestas tristique, tellus massa fringilla est, id sagittis tellus urna non mauris. Suspendisse fringilla, velit nec blandit facilisis, ligula ante imperdiet est, et placerat magna sem quis tortor. Vestibulum vitae fermentum velit, rhoncus egestas orci. Nulla at purus ut orci posuere vulputate. In eget leo diam. In congue in diam nec elementum. Suspendisse fringilla ante nulla, eu tristique orci ultrices eget. Aenean non lorem tellus. Vestibulum tempor metus sit amet tellus feugiat, sit amet consequat lacus ultricies. Donec imperdiet, lectus eget congue cursus, dolor enim finibus risus, ut molestie lorem tellus non tortor. Donec quam nibh, molestie in dapibus et, efficitur non tortor. Morbi orci tellus, mollis vel mi vitae, auctor lobortis erat. Ut gravida velit eget ligula lacinia, id rhoncus tellus gravida. Maecenas laoreet rutrum consequat. Suspendisse sed nibh dui. Curabitur dictum euismod mollis. Sed egestas libero libero, eu accumsan augue placerat non. Nunc id condimentum orci. Mauris vitae sollicitudin quam. Giphy Gifs will look like: via GIPHY</summary></entry></feed>